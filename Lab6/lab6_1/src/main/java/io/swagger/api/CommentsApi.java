/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.68).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.CommentListResponse;
import io.swagger.model.CommentResponse;
import io.swagger.model.CreateCommentRequest;
import io.swagger.model.UpdateCommentRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-03-26T03:49:08.968760438Z[GMT]")
@Validated
public interface CommentsApi {

    @Operation(summary = "Удалить комментарий", description = "", tags={ "comments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Комментарий успешно удален"),
        
        @ApiResponse(responseCode = "404", description = "Комментарий не найден") })
    @RequestMapping(value = "/comments/{comment_id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> commentsCommentIdDelete(@Parameter(in = ParameterIn.PATH, description = "ID комментария", required=true, schema=@Schema()) @PathVariable("comment_id") Long commentId
);


    @Operation(summary = "Поставить дизлайк комментарию", description = "", tags={ "comments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Дизлайк успешно поставлен", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CommentResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Комментарий уже оценён этим пользователем"),
        
        @ApiResponse(responseCode = "404", description = "Комментарий не найден") })
    @RequestMapping(value = "/comments/{comment_id}/dislike",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CommentResponse> commentsCommentIdDislikePost(@Parameter(in = ParameterIn.PATH, description = "ID комментария", required=true, schema=@Schema()) @PathVariable("comment_id") Long commentId
, @NotNull @Parameter(in = ParameterIn.QUERY, description = "ID пользователя, совершающего действие (лайк/дизлайк)" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "commentator_id", required = true) Long commentatorId
);


    @Operation(summary = "Получить комментарий по ID", description = "", tags={ "comments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Успешный запрос", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CommentResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Комментарий не найден") })
    @RequestMapping(value = "/comments/{comment_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CommentResponse> commentsCommentIdGet(@Parameter(in = ParameterIn.PATH, description = "ID комментария", required=true, schema=@Schema()) @PathVariable("comment_id") Long commentId
);


    @Operation(summary = "Поставить лайк комментарию", description = "", tags={ "comments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Лайк успешно поставлен", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CommentResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Комментарий уже оценён этим пользователем"),
        
        @ApiResponse(responseCode = "404", description = "Комментарий не найден") })
    @RequestMapping(value = "/comments/{comment_id}/like",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CommentResponse> commentsCommentIdLikePost(@Parameter(in = ParameterIn.PATH, description = "ID комментария", required=true, schema=@Schema()) @PathVariable("comment_id") Long commentId
, @NotNull @Parameter(in = ParameterIn.QUERY, description = "ID пользователя, совершающего действие (лайк/дизлайк)" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "commentator_id", required = true) Long commentatorId
);


    @Operation(summary = "Обновить комментарий", description = "", tags={ "comments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Комментарий успешно обновлен", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CommentResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Комментарий не найден") })
    @RequestMapping(value = "/comments/{comment_id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<CommentResponse> commentsCommentIdPut(@Parameter(in = ParameterIn.PATH, description = "ID комментария", required=true, schema=@Schema()) @PathVariable("comment_id") Long commentId
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody UpdateCommentRequest body
);


    @Operation(summary = "Получить список комментариев", description = "", tags={ "comments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Успешный запрос", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CommentListResponse.class))) })
    @RequestMapping(value = "/comments",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CommentListResponse> commentsGet(@Parameter(in = ParameterIn.QUERY, description = "Номер страницы" ,schema=@Schema( defaultValue="1")) @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page
, @Parameter(in = ParameterIn.QUERY, description = "Размер страницы" ,schema=@Schema( defaultValue="10")) @Valid @RequestParam(value = "size", required = false, defaultValue="10") Integer size
, @Parameter(in = ParameterIn.QUERY, description = "ID сервиса" ,schema=@Schema()) @Valid @RequestParam(value = "service_id", required = false) Long serviceId
, @Parameter(in = ParameterIn.QUERY, description = "ID пользователя (необязательно для фильтрации)" ,schema=@Schema()) @Valid @RequestParam(value = "commentator_id", required = false) Long commentatorId
);


    @Operation(summary = "Создать новый комментарий", description = "", tags={ "comments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Комментарий успешно создан", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CommentResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Неверные входные данные") })
    @RequestMapping(value = "/comments",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CommentResponse> commentsPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CreateCommentRequest body
);

}

